package com.spring.carrentalapp.Car_Rental.utils;

import java.security.Key;
import java.util.*;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import java.util.function.Function;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component
public class JWTUtil {

//    public String extractUsername(String token) {
//        return extractClaim(token, Claims::getSubject);
//    }
//    
//    public String generateToken(UserDetails useDetails) {
//        return generateToken(new HashMap<>(), useDetails);
//    }
//
//    public Boolean isValidateToken(String token, UserDetails useDetails) {
//        final String username = extractUsername(token);
//        return (username.equals(useDetails.getUsername())) && !isTokenExpired(token);
//    }
//
//    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
//        final Claims claims = getAllClaimsFromToken(token);
//        return claimsResolver.apply(claims);
//    }
//    
//    
//    private String generateToken(Map<String, Object> claims, UserDetails useDetails) {
//        return Jwts.builder()
//                   .setClaims(claims)
//                   .setSubject(useDetails.getUsername())
//                   .setIssuedAt(new Date(System.currentTimeMillis()))
//                   .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 *24))
//                   .signWith(getSigningKey(), SignatureAlgorithm.HS256)
//                   .compact();
//    }
//    
//    private String generateRefreshToken(Map<String, Object> claims, UserDetails useDetails) {
//        return Jwts.builder()
//                   .setClaims(claims)
//                   .setSubject(useDetails.getUsername())
//                   .setIssuedAt(new Date(System.currentTimeMillis()))
//                   .setExpiration(new Date(System.currentTimeMillis() + 604800000))
//                   .signWith(getSigningKey(), SignatureAlgorithm.HS256)
//                   .compact();
//    }
//    
//    private Boolean isTokenExpired(String token) {
//        return extractExpiration(token).before(new Date());
//    }
//    
//    public Date extractExpiration(String token) {
//        return extractClaim(token, Claims::getExpiration);
//    }
//    
//    private Claims getAllClaimsFromToken(String token) {
//        return Jwts.parserBuilder().setSigningKey(getSigningKey()).build().parseClaimsJws(token).getBody();
//    }
//    
//    private Key getSigningKey() {
//    	byte[] keyBytes = Decoders.BASE64.decode("");
//        return Keys.hmacShaKeyFor(keyBytes);
//    }
	
	
	
}
