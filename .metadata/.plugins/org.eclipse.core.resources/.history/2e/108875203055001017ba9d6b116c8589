package com.spring.carrentalapp.Car_Rental.services.customer;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.spring.carrentalapp.Car_Rental.dto.CarDto;
import com.spring.carrentalapp.Car_Rental.dto.RentACarDto;
import com.spring.carrentalapp.Car_Rental.entity.Car;
import com.spring.carrentalapp.Car_Rental.entity.RentACar;
import com.spring.carrentalapp.Car_Rental.entity.User;
import com.spring.carrentalapp.Car_Rental.repository.CarRepository;
import com.spring.carrentalapp.Car_Rental.repository.RentACarRepository;
import com.spring.carrentalapp.Car_Rental.repository.UserRepository;

@Service
public class CustomerServiceImplementation implements CustomerService {

	private final CarRepository carRepository;
	private final UserRepository userRepository;
	private final RentACarRepository rentACarRepository;
	CustomerServiceImplementation(CarRepository carRepository,
								  UserRepository userRepository,
								  RentACarRepository rentACarRepository){
		this.carRepository = carRepository;
		this.userRepository = userRepository;
		this.rentACarRepository = rentACarRepository;
	}
	
	@Override
	public List<CarDto> getAllCArs() {
		return carRepository.findAll().stream().map(Car::getCarDto).collect(Collectors.toList());
	}

	@Override
	public boolean bookCar(RentACarDto rentACarDto) {
		Optional<Car> optionalCar = carRepository.findById(rentACarDto.getCarId()); 
		Optional<User> optionalUser = userRepository.findById(rentACarDto.getUserId());
		if(optionalCar.isPresent() && optionalUser.isPresent()) {
			Car currentCar = optionalCar.get();
			RentACar rentACar = new RentACar();
			rentACar.setUser(optionalUser.get());
			rentACar.setCar(currentCar);
			rentACar.setFromDate(rentACarDto.getToDate());
			rentACar.setToDate(rentACarDto.getFromDate());
//			rentACar.setCookCarStatus();
			long diffInMilliseconds = rentACarDto.getToDate().getTime() - rentACarDto.getFromDate().getTime();
			long days = TimeUnit.MILLISECONDS.toDays(diffInMilliseconds);
			rentACar.setDays(days);
			rentACar.setPrice(currentCar.getPrice()* days);
			rentACarRepository.save(rentACar);
			return true;
		}
		return false;
	}

	@Override
	public CarDto getCarById(Long carId) {
		Optional<Car> optionalCar = carRepository.findById(carId);
		return optionalCar.map(Car::getCarDto).orElse(null);
	}

	@Override
	public List<RentACarDto> getBookingsByUserId(Long userId) {
		return rentACarRepository.findAllByUserId(userId).stream().map(RentACar::getRentACarDto).collect(Collectors.toList());

	}
}
